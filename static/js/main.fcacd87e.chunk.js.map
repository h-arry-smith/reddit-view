{"version":3,"sources":["util/Reddit.js","features/posts/postSlice.js","features/search/SearchBar.js","features/subreddit/SubredditSelector.js","app/NavBar.js","features/posts/Score.js","features/posts/MobileImageCard.js","features/posts/PostCard.js","features/posts/Post.js","features/posts/PostPlaceholder.js","features/posts/PostList.js","features/category/Category.js","features/category/CategoryList.js","features/search/SearchResultDisplay.js","features/subreddit/SubredditDisplay.js","app/DisplayContainer.js","app/Home.js","app/RedditLink.js","features/comments/Comment.js","features/comments/CommentList.js","features/detailpost/detailPostSlice.js","features/detailpost/PostHead.js","features/detailpost/DetailPost.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["fetchRedditPage","endpoint","a","fetch","then","response","json","data","getPosts","posts","child","children","post","newPostObj","id","nanoid","subreddit","postHint","post_hint","title","score","author","url","permalink","thumbnail","image","push","fetchPosts","createAsyncThunk","postsSlice","createSlice","name","initialState","status","searchTerm","error","reducers","setEndpoint","state","action","payload","setSearch","setSubreddit","extraReducers","pending","fulfilled","rejected","message","actions","selectAllPosts","SearchBar","history","useHistory","dispatch","useDispatch","useState","searchText","setSearchText","onSubmit","e","preventDefault","className","htmlFor","type","value","onChange","target","SubredditSelector","event","NavBar","to","Score","MobileImageCard","src","alt","PostCard","class","Post","thumbImg","card","PostPlaceholder","PostList","useSelector","postStatus","useEffect","content","map","Category","active","onClick","CategoryList","current","setEndpointOnClick","SearchResultDisplay","SubredditDisplay","DisplayContainer","Home","RedditLink","href","Comment","comment","body","CommentList","comments","Object","keys","length","createCommentObjects","commentContent","commentObj","fetchPost","console","log","postContent","postObj","mediaOnly","media_only","isSelf","is_self","selfText","selftext","detailPostsSlice","PostHead","DetailPost","detailpost","match","useParams","postId","find","selectPostById","postDetail","style","maxHeight","App","path","configureStore","reducer","postsReducer","detailPostReducer","Boolean","window","location","hostname","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fcacd87e.chunk.js","sourcesContent":["// Reddit Utility functions to get data for the viewer app.\nimport { sampleData } from './sampleResponse'\nimport { nanoid } from '@reduxjs/toolkit'\n\n// Fetch and return posts from the frontpage\nexport const fetchRedditPage = async (endpoint) => {\n  let data = await fetch(`https://www.reddit.com${endpoint}.json`)\n    .then(response => response.json())\n    .then(response => response.data);\n\n  return getPosts(data);\n}\n\n// Return a list of structured objects from json data\nexport const getPosts = (data) => {\n  const posts = [];\n\n  for (const child in data.children) {\n    let post = data.children[child].data;\n    let newPostObj = {\n      id: nanoid(),\n      subreddit: post.subreddit,\n      postHint: post.post_hint,\n      title: post.title,\n      score: post.score,\n      author: post.author,\n      url: `https://www.reddit.com/${post.permalink}`,\n      thumbnail: post.thumbnail,\n      image: post.url,\n    }\n\n    posts.push(newPostObj);\n  }\n\n  return posts;\n}\n\n// Return a list of posts from the sample data with only props we care about\nexport const getSamplePosts = () => {\n  return getPosts(sampleData.data);\n}","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchRedditPage } from '../../util/Reddit'\n\nconst initialState = {\n  data: [],\n  status: 'idle',\n  subreddit: 'popular',\n  endpoint: '/r/popular/hot',\n  searchTerm: '',\n  error: null\n};\n\nexport const fetchPosts = createAsyncThunk('posts/fetchPosts', async (endpoint) => {\n  const data = await fetchRedditPage(endpoint);\n  return data\n})\n\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    setEndpoint(state, action) {\n      state.endpoint = action.payload;\n      state.status = 'idle';\n      state.searchTerm = '';\n    },\n    setSearch(state, action) {\n      state.endpoint = `/search.json?q=${action.payload}`;\n      state.status = 'idle';\n      state.searchTerm = action.payload;\n    },\n    setSubreddit(state, action) {\n      state.subreddit = action.payload;\n      state.endpoint = `/r/${state.subreddit}/hot`;\n      state.status = 'idle';\n      state.searchTerm = '';\n    }\n  },\n  extraReducers: {\n    [fetchPosts.pending]: (state, action) => {\n      state.status = 'loading';\n    },\n    [fetchPosts.fulfilled]: (state, action) => {\n      state.status = 'succeeded';\n      state.data = action.payload;\n    },\n    [fetchPosts.rejected]: (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }\n  }\n})\n\nexport const {setEndpoint, setSearch, setSubreddit} = postsSlice.actions;\nexport default postsSlice.reducer;\n\nexport const selectAllPosts = state => state.posts.data;\nexport const selectPostById = (state, id) => state.posts.data.find(e => e.id === id)","import React, { useState } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { useHistory } from 'react-router-dom'\nimport { setSearch } from '../posts/postSlice'\n\nexport const SearchBar = () => {\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const [searchText, setSearchText] = useState('');\n\n  const onSearchTextChanged = e => setSearchText(e.target.value);\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    dispatch(setSearch(searchText))\n    setSearchText('');\n    history.push('/');\n  }\n\n  return (\n    <div>\n      <form onSubmit={onSubmit} className=\"flex items-center my-2\">\n        <label htmlFor=\"search\" className=\"text-sm tracking-wide text-gray-400 uppercase\">\n          search\n        </label>\n        <input \n          className=\"w-full px-2 py-px ml-2 border rounded-md appearance-none\"\n          type=\"text\"\n          id=\"search\"\n          name=\"search\"\n          value={searchText}\n          onChange={onSearchTextChanged}\n        />\n      </form>\n    </div>\n  );\n}","import React from 'react'\nimport { useDispatch } from 'react-redux'\n\nimport {setSubreddit} from '../posts/postSlice'\n\n// Choose 10 interesting subreddits just to build out functionality, future work could be done here\nexport const SubredditSelector = () => {\n  const dispatch = useDispatch();\n\n  const changeSubreddit = (event) => {\n    event.preventDefault();\n    dispatch(setSubreddit(event.target.value));\n  }\n\n  return (\n    <div>\n      <select \n        name=\"subreddits\" \n        id=\"subreddits\"\n        onChange={changeSubreddit}\n      >\n        <option value=\"popular\">Popular</option>\n        <option value=\"2meirl4meirl\">2meirl4meirl</option>\n        <option value=\"disneyvacation\">disneyvacation</option>\n        <option value=\"unresolvedmysteries\">unresolvedmysteries</option>\n        <option value=\"wewantplates\">wewantplates</option>\n        <option value=\"antiMLM\">antiMLM</option>\n        <option value=\"talesfromretail\">talesfromretail</option>\n        <option value=\"publicfreakout\">publicfreakout</option>\n        <option value=\"askreddit\">askreddit</option>\n        <option value=\"unethicalLifeProTips\">unethicalLifeProTips</option>\n\n      </select>\n    </div>\n  )\n}","import React from 'react'\nimport {Link} from 'react-router-dom'\nimport { SearchBar } from '../features/search/SearchBar'\nimport { SubredditSelector } from '../features/subreddit/SubredditSelector'\n\nexport const NavBar = () => {\n  return (\n    <div className=\"px-4 bg-white border-b-4 border-yellow-500\">\n      <div className=\"flex items-center justify-between w-full mt-4 text-center sm:justify-start\">\n        <div className=\"\">\n          <h1 className=\"text-3xl font-semibold\">RedditView</h1>\n        </div>\n        <div className=\"mt-1 ml-4\">\n          <SubredditSelector />\n        </div>\n        <div className=\"w-full text-lg font-semibold text-right hover:text-yellow-600 sm:justify-self-end\">\n          <Link to=\"/\">\n            Home\n          </Link>\n        </div>\n      </div>\n      <SearchBar />\n    </div>\n  )\n}","import React from 'react'\n\nexport const Score = ({score}) => (\n  <div className=\"flex items-center justify-end w-1/6 sm:pr-2 md:font-semibold md:text-xl\">\n    <p id=\"score\" className=\"text-gray-600\">{score}</p>\n  </div>\n)","import React from 'react'\nimport { Score } from './Score'\n\nexport const MobileImageCard = ({post, image}) => (\n  <div className=\"m-4 overflow-hidden bg-white border rounded-md shadow-sm sm:p-4 sm:flex hover:shadow-md lg:max-h-40\">\n\n    <div className=\"sm:w-1/6 lg:px-4\">\n      <img src={image} className=\"h-auto lg:h-full\" alt=\"\"/>\n    </div>\n\n    <div className=\"flex w-full pl-4 mb-4\">\n      <div className=\"w-5/6\">\n        <div className=\"mt-2 text-xs tracking-wide text-gray-500 uppercase\">\n          <span id=\"subreddit\">\n            r/{post.subreddit}\n          </span>\n          <span> | </span>\n          <span id=\"author\">\n            u/{post.author}\n          </span>\n        </div>\n        <h1 id=\"title\" className=\"w-full text-xl font-semibold text-gray-900\">{post.title}</h1>\n      </div>\n\n      <Score score={post.score} />\n    </div>\n  </div>\n)","import React from 'react'\nimport { Score } from './Score'\n\nexport const PostCard = ({post, image}) => (\n  <div className=\"flex p-4 m-4 bg-white border rounded-md shadow-sm hover:shadow-md lg:max-h-40\">\n    <div className=\"sm:w-1/6\">\n      {image}\n    </div>\n\n  <div class=\"w-full flex\">\n    <div className=\"w-5/6 ml-4\">\n      <div className=\"text-xs tracking-wide text-gray-500 uppercase\">\n        <span id=\"subreddit\">\n          r/{post.subreddit}\n        </span>\n        <span> | </span>\n        <span id=\"author\">\n          u/{post.author}\n        </span>\n      </div>\n\n      <h1 id=\"title\" className=\"w-full text-xl font-semibold text-gray-900\">{post.title}</h1>\n    </div>\n\n    <Score score={post.score} />\n  </div>\n  </div>\n)","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { MobileImageCard } from './MobileImageCard';\nimport { PostCard } from './PostCard';\n\nexport const Post = ({post}) => {\n\n  let thumbImg;\n  switch (post.thumbnail) {\n    case 'self':\n      thumbImg = <p className=\"font-bold tracking-wide text-center text-gray-500 uppercase\">self</p>;\n      break;\n    case 'nsfw':\n      thumbImg = <p className=\"font-bold tracking-wide text-center text-red-700 uppercase\">nsfw</p>;\n      break;\n    case 'default':\n      thumbImg = <p></p>\n      break;\n    case '':\n      thumbImg = <p></p>\n      break;\n    default:\n      thumbImg = <img src={post.thumbnail} className=\"h-auto mx-auto lg:h-full\" alt=\"\"/>\n  }\n\n  // TODO: Tidying up of post objects, pass as explicit props\n  let card = <PostCard image={thumbImg} post={post} />\n  if (post.postHint === 'image') {\n    card = <MobileImageCard image={post.image} post={post} />\n  }\n\n  return (\n    <Link to={`/post/${post.id}`}>\n      {card}\n    </Link>\n  );\n}","import React from 'react'\n\nexport const PostPlaceholder = () => {\n  return (\n    <div className=\"flex p-4 m-4 bg-gray-200 border rounded-md shadow-sm hover:shadow-md\">\n      <div className=\"w-1/6 bg-gray-300\">\n      </div>\n      <div className=\"w-4/6 ml-4\">\n        <p className=\"text-xs tracking-wide text-gray-400 uppercase\">Loading...</p>\n        <h1 className=\"w-full text-xl font-semibold text-gray-400\">Loading...</h1>\n      </div>\n      <div className=\"flex items-center justify-center w-1/6\">\n        <p className=\"text-sm text-gray-600 uppercase\">Loading...</p>\n      </div>\n  </div>\n  );\n}","import React, { useEffect } from 'react'\nimport { useDispatch, useSelector} from 'react-redux'\nimport { selectAllPosts, fetchPosts} from './postSlice'\n\nimport { Post } from './Post'\nimport { PostPlaceholder } from './PostPlaceholder'\n\nexport const PostList = () => {\n  const dispatch = useDispatch();\n  const posts = useSelector(selectAllPosts)\n\n  const postStatus = useSelector(state => state.posts.status)\n  const endpoint = useSelector(state => state.posts.endpoint)\n  const error = useSelector(state => state.posts.error)\n\n  useEffect(() => {\n    if (postStatus === 'idle') {\n      dispatch(fetchPosts(endpoint))\n    }\n  }, [postStatus, dispatch, endpoint]);\n\n  let content = <div></div>;\n\n  if (postStatus === 'loading') {\n    content = (\n      <div>\n        {[1,2,3,4,5].map((e) =>{ return <PostPlaceholder key={e}/>})}\n      </div>\n    )\n  }\n\n  if (postStatus === 'succeeded') {\n    content = (\n      <div>\n        {posts.map(post => {\n          return <Post key={post.id} post={post} />\n        })}\n      </div>\n    )\n  }\n\n  if (postStatus === 'failed') {\n    content = (\n      <div>\n        <h1>Error!</h1>\n        <p>{error}</p>\n      </div>\n    )\n  }\n\n  return (\n    <div>\n      {content}\n    </div>\n  );\n}","import React from 'react';\n\nexport const Category = ({name, active, onClick}) => {\n  if (active) {\n  return (\n    <div onClick={onClick} className=\"flex items-center justify-center w-1/3 h-12 bg-white border-b-4 border-red-600\">\n      <p className=\"text-lg font-semibold tracking-wide text-red-600\">{name}</p>\n    </div>\n  )\n  }\n  return (\n    <div onClick={onClick} className=\"flex items-center justify-center w-1/3 h-12 border-b-4 bg-gray-50 hover:border-gray-600\">\n      <p className=\"text-lg font-semibold tracking-wide text-gray-500 hover:text-gray-900\">{name}</p>\n    </div>\n  );\n}","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setEndpoint } from '../posts/postSlice'\n\nimport { Category } from './Category';\n\nexport const CategoryList = () => {\n  const dispatch = useDispatch();\n  const current = useSelector(state => state.posts.endpoint);\n  const subreddit = useSelector(state => state.posts.subreddit);\n  \n  const setEndpointOnClick = (endpoint) => {\n    dispatch(setEndpoint(endpoint))\n  }\n\n  return (\n    <div className=\"flex items-center justify-center border-t\" >\n      <Category \n        name='hot' \n        active={current === `/r/${subreddit}/hot` ? true : false} \n        onClick={() => setEndpointOnClick(`/r/${subreddit}/hot`)} \n      />\n      <Category \n        name='top' \n        active={current === `/r/${subreddit}/top` ? true : false} \n        onClick={() => setEndpointOnClick(`/r/${subreddit}/top`)} \n      />\n      <Category \n        name='new' \n        active={current === `/r/${subreddit}/new` ? true : false} \n        onClick={() => setEndpointOnClick(`/r/${subreddit}/new`)} \n      />\n    </div>\n  );\n}","import React from 'react'\nimport {useSelector} from 'react-redux'\n\nexport const SearchResultDisplay = () => {\n  let searchTerm = useSelector(state => state.posts.searchTerm);\n\n  if (searchTerm === '') {\n    return (\n      <div></div>\n    )\n  }\n\n  return (\n    <div className=\"mx-4 mt-2 -mb-2 text-2xl font-semibold border-b\">\n      <p><span className=\"font-light text-gray-600\">Searched for </span> {searchTerm}</p>\n    </div>\n  )\n}","import React from 'react'\nimport {useSelector} from 'react-redux'\n\nexport const SubredditDisplay = () => {\n  let subreddit = useSelector(state => state.posts.subreddit);\n\n  return (\n    <div className=\"py-2 mx-4 text-2xl font-semibold\">\n      <p><span className=\"font-light text-gray-600\">r/</span>{subreddit}</p>\n    </div>\n  )\n}","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { CategoryList } from '../features/category/CategoryList'\nimport { SearchResultDisplay } from '../features/search/SearchResultDisplay'\nimport { SubredditDisplay } from '../features/subreddit/SubredditDisplay'\n\nexport const DisplayContainer = () => {\n  let searchTerm = useSelector(state => state.posts.searchTerm)\n\n  if (searchTerm === '' ) {\n    return (\n      <div className=\"bg-white\">\n        <SubredditDisplay />\n        <CategoryList />\n      </div>\n    )\n  }\n\n  return (\n    <div>\n      <SearchResultDisplay />\n    </div>\n  )\n}","import React from 'react'\nimport { PostList } from '../features/posts/PostList'\nimport { DisplayContainer } from './DisplayContainer';\n\nexport const Home = () => {\n  return (\n    <div>\n      <DisplayContainer />\n      <PostList />\n    </div>\n  );\n}","import React from 'react'\n\nexport const RedditLink = ({url}) => {\n  return (\n    <a href={url}>\n      <div className=\"flex items-center justify-center py-1 mx-2 mt-2 -mb-4 text-sm font-semibold text-white uppercase bg-indigo-600 border-2 border-indigo-600 rounded-md shadow-sm hover:shadow-md hover:bg-white hover:text-indigo-600 hover:border-opacity-100\">\n        <p>\n          View this post on reddit.\n        </p>\n      </div>\n    </a>\n  )\n}","import React from 'react'\n\nexport const Comment = ({comment}) => {\n  return (\n    <div className=\"p-2 my-4 bg-white\">\n      <div className=\"flex justify-between text-sm tracking-wide text-gray-500 border-b\">\n        <p id=\"author\">u/{comment.author}</p>\n        <p id=\"score\">{comment.score}</p>\n      </div>\n      <div className=\"px-2 mt-2\"> \n        <p id=\"body\">{comment.body}</p>\n      </div>\n    </div>\n  )\n}","import React from 'react'\nimport { Comment } from './Comment'\n\nexport const CommentList = ({comments}) => {\n  if (Object.keys(comments).length === 0) {\n    return <div>No Comments</div>\n  }\n\n  return (\n    <div className=\"\">\n      {comments.map(comment => {\n        return <Comment key={comment.id} comment={comment} />\n      })}\n    </div>\n  )\n}","import { createAsyncThunk, createSlice, nanoid } from '@reduxjs/toolkit';\n\nconst initialState = {\n  data: [],\n  status: 'idle',\n  error: null\n};\n\n// Take comment content and return a list of constructed comment obj\nexport const createCommentObjects = (commentContent) => {\n  let comments = [];\n  for (let child in commentContent) {\n    let comment = commentContent[child].data\n\n    let commentObj = {\n      id: nanoid(),\n      author: comment.author,\n      body: comment.body,\n      score: comment.score,\n    }\n\n    comments.push(commentObj);\n  }\n\n  return comments;\n}\n\n// TODO: Should be elevated to reddit util really\nexport const fetchPost = createAsyncThunk('detailpost/fetchPosts', async ({id, url}) => {\n  console.log(`${url}.json`)\n\n  let data;\n  try {\n    data = await fetch(`${url}.json`)\n      .then(response => response.json());\n  } catch (e) {\n    console.log(e)\n    return {'id': id, 'post': {}, 'comments': {}};\n  }\n\n  let postContent = data[0].data.children[0].data;\n  let commentContent = data[1].data.children\n\n  let postObj = {\n    id: id,\n    post : {\n      subreddit: postContent.subreddit,\n      title: postContent.title,\n      score: postContent.score,\n      mediaOnly: postContent.media_only,\n      isSelf: postContent.is_self,\n      selfText: postContent.selftext,\n      postHint: postContent.post_hint,\n    },\n    comments: createCommentObjects(commentContent),\n  }\n  // Check for image, if it is - make url image, if not store just as url\n  if (postContent.post_hint === 'image') {\n    postObj.image = postContent.url\n  } else {\n    postObj.url = postContent.url\n  }\n\n  return postObj;\n})\n\nconst detailPostsSlice = createSlice({\n  name: 'detailpost',\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [fetchPost.pending]: (state, action) => {\n      state.status = 'loading';\n    },\n    [fetchPost.fulfilled]: (state, action) => {\n      state.status = 'succeeded';\n      state.data = action.payload;\n    },\n    [fetchPost.rejected]: (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }\n  }\n})\n\nexport default detailPostsSlice.reducer;\n","import React from 'react'\n\nexport const PostHead = ({title, author, score, subreddit}) => {\n  return (\n    <div className=\"px-4 py-2 m-2 bg-white rounded-md shadow-md hover:shadow-lg\">\n      <p className=\"mt-2 text-xs tracking-wide uppercase text-grey-500\">r/{subreddit}</p>\n      <h1 className=\"text-xl font-bold text-gray-900\">{title}</h1>\n      <div className=\"flex justify-between mt-4 align-baseline\">\n        <div className=\"text-gray-500 ext-sm\">\n          <span>u/{author}</span>\n        </div>\n        <div>\n          <span className=\"text-lg font-semibold text-yellow-700\">{score}</span>\n        </div>\n      </div>\n    </div>\n  );\n}","import React, {useEffect} from 'react'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {Redirect, useParams} from 'react-router-dom'\nimport { RedditLink } from '../../app/RedditLink';\nimport { CommentList } from '../comments/CommentList';\nimport { selectPostById } from '../posts/postSlice';\nimport { fetchPost } from './detailPostSlice'\nimport { PostHead } from './PostHead';\n\nexport const DetailPost = () => {\n  let dispatch = useDispatch();\n  let postStatus = useSelector(state => state.detailpost.status)\n\n  let match = useParams().postId;\n  let post = useSelector(state => selectPostById(state, match));\n\n  // Provide a default post object - probably should be somewhere else\n  // Undefined state should return default object in reducer?\n  // TODO: Think about above.\n  if (!post) {\n    post = {url: '', id:'none'}\n  }\n\n  let postDetail = useSelector(state => state.detailpost.data);\n\n  useEffect(() => {\n    if (postStatus === 'idle'  || match !== postDetail.id) {\n      dispatch(fetchPost({id: match, url: post.url}))\n    }\n  }, [dispatch, postStatus, post.url, post.id, match, postDetail.id]);\n\n  // If post id is none, we need to go back home, something is wrong\n  if (post.id === 'none' && (postStatus !== 'idle' || postStatus !== 'loading')) {\n    return (\n      <Redirect to=\"/\" />\n    )\n  }\n\n  if (postStatus === 'loading' || postStatus === 'idle') {\n    return (\n      <div className=\"p-6 text-3xl text-gray-400\">\n        Loading...\n      </div>\n    )\n  }\n\n  const image = (\n    <a href={postDetail.image}>\n      <img src={postDetail.image} className=\"w-auto mx-auto\" style={{maxHeight: '40rem'}} alt=\"\"/>\n    </a>\n  )\n\n  return (\n    <div key={post.id}>\n      <RedditLink url={post.url}/>\n      <div className=\"my-6\">\n        <PostHead \n          title={postDetail.post.title} \n          author={post.author} \n          score={postDetail.post.score} \n          subreddit={postDetail.post.subreddit}\n        />\n      </div>\n\n      <div style={{maxHeight: '80rem'}}>\n        {postDetail.image ?  image : ''}\n      </div>\n\n      <div>\n        <h2 className=\"mx-2 mt-4 -mb-2 text-2xl font-semibold text-gray-900 border-t\">Top-Level Comments</h2>\n        <CommentList comments={postDetail.comments}/>\n      </div>\n    </div>\n  );\n}","import React from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n} from \"react-router-dom\";\r\n\r\nimport {NavBar} from './app/NavBar'\r\nimport {Home} from './app/Home'\r\n\r\nimport {DetailPost} from './features/detailpost/DetailPost'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"text-gray-800 bg-gray-100\">\r\n      <Router>\r\n        <NavBar />        \r\n\r\n        <main>\r\n          <Switch>\r\n            <Route path=\"/post/:postId\">\r\n              <DetailPost />\r\n            </Route>\r\n            <Route path=\"/\">\r\n              <Home />\r\n            </Route>\r\n          </Switch>\r\n        </main>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport postsReducer from '../features/posts/postSlice'\r\nimport detailPostReducer from '../features/detailpost/detailPostSlice'\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    posts: postsReducer,\r\n    detailpost: detailPostReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}